// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATE_GS_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_GS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace GS {

struct GameState;
struct GameStateBuilder;

struct Player;
struct PlayerBuilder;

struct PlayingCard;
struct PlayingCardBuilder;

struct PacketTypeHolder;
struct PacketTypeHolderBuilder;

struct GameState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERS = 4,
    VT_CARDS_ON_GROUND = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<GS::Player>> *players() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GS::Player>> *>(VT_PLAYERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<GS::PlayingCard>> *cards_on_ground() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GS::PlayingCard>> *>(VT_CARDS_ON_GROUND);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           VerifyOffset(verifier, VT_CARDS_ON_GROUND) &&
           verifier.VerifyVector(cards_on_ground()) &&
           verifier.VerifyVectorOfTables(cards_on_ground()) &&
           verifier.EndTable();
  }
};

struct GameStateBuilder {
  typedef GameState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GS::Player>>> players) {
    fbb_.AddOffset(GameState::VT_PLAYERS, players);
  }
  void add_cards_on_ground(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GS::PlayingCard>>> cards_on_ground) {
    fbb_.AddOffset(GameState::VT_CARDS_ON_GROUND, cards_on_ground);
  }
  explicit GameStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GameState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameState>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameState> CreateGameState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GS::Player>>> players = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GS::PlayingCard>>> cards_on_ground = 0) {
  GameStateBuilder builder_(_fbb);
  builder_.add_cards_on_ground(cards_on_ground);
  builder_.add_players(players);
  return builder_.Finish();
}

inline flatbuffers::Offset<GameState> CreateGameStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<GS::Player>> *players = nullptr,
    const std::vector<flatbuffers::Offset<GS::PlayingCard>> *cards_on_ground = nullptr) {
  auto players__ = players ? _fbb.CreateVector<flatbuffers::Offset<GS::Player>>(*players) : 0;
  auto cards_on_ground__ = cards_on_ground ? _fbb.CreateVector<flatbuffers::Offset<GS::PlayingCard>>(*cards_on_ground) : 0;
  return GS::CreateGameState(
      _fbb,
      players__,
      cards_on_ground__);
}

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_ID = 6,
    VT_X = 8,
    VT_Y = 10,
    VT_RAT_TYPE = 12,
    VT_FRAME = 14,
    VT_ROTATION = 16,
    VT_MESSAGE = 18
  };
  int32_t packet_type() const {
    return GetField<int32_t>(VT_PACKET_TYPE, 0);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int32_t rat_type() const {
    return GetField<int32_t>(VT_RAT_TYPE, 0);
  }
  int32_t frame() const {
    return GetField<int32_t>(VT_FRAME, 0);
  }
  int32_t rotation() const {
    return GetField<int32_t>(VT_ROTATION, 0);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PACKET_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_RAT_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_FRAME, 4) &&
           VerifyField<int32_t>(verifier, VT_ROTATION, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  typedef Player Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(int32_t packet_type) {
    fbb_.AddElement<int32_t>(Player::VT_PACKET_TYPE, packet_type, 0);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Player::VT_ID, id, 0);
  }
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(Player::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(Player::VT_Y, y, 0);
  }
  void add_rat_type(int32_t rat_type) {
    fbb_.AddElement<int32_t>(Player::VT_RAT_TYPE, rat_type, 0);
  }
  void add_frame(int32_t frame) {
    fbb_.AddElement<int32_t>(Player::VT_FRAME, frame, 0);
  }
  void add_rotation(int32_t rotation) {
    fbb_.AddElement<int32_t>(Player::VT_ROTATION, rotation, 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Player::VT_MESSAGE, message);
  }
  explicit PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t packet_type = 0,
    int32_t id = 0,
    int32_t x = 0,
    int32_t y = 0,
    int32_t rat_type = 0,
    int32_t frame = 0,
    int32_t rotation = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_rotation(rotation);
  builder_.add_frame(frame);
  builder_.add_rat_type(rat_type);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_id(id);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Player> CreatePlayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t packet_type = 0,
    int32_t id = 0,
    int32_t x = 0,
    int32_t y = 0,
    int32_t rat_type = 0,
    int32_t frame = 0,
    int32_t rotation = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return GS::CreatePlayer(
      _fbb,
      packet_type,
      id,
      x,
      y,
      rat_type,
      frame,
      rotation,
      message__);
}

struct PlayingCard FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayingCardBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_COMMAND = 6,
    VT_UNIQUE_ID = 8,
    VT_VALUE = 10,
    VT_X = 12,
    VT_Y = 14,
    VT_FLIPPED = 16
  };
  int32_t packet_type() const {
    return GetField<int32_t>(VT_PACKET_TYPE, 0);
  }
  int32_t command() const {
    return GetField<int32_t>(VT_COMMAND, 0);
  }
  int32_t unique_id() const {
    return GetField<int32_t>(VT_UNIQUE_ID, 0);
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool flipped() const {
    return GetField<uint8_t>(VT_FLIPPED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PACKET_TYPE, 4) &&
           VerifyField<int32_t>(verifier, VT_COMMAND, 4) &&
           VerifyField<int32_t>(verifier, VT_UNIQUE_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyField<uint8_t>(verifier, VT_FLIPPED, 1) &&
           verifier.EndTable();
  }
};

struct PlayingCardBuilder {
  typedef PlayingCard Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(int32_t packet_type) {
    fbb_.AddElement<int32_t>(PlayingCard::VT_PACKET_TYPE, packet_type, 0);
  }
  void add_command(int32_t command) {
    fbb_.AddElement<int32_t>(PlayingCard::VT_COMMAND, command, 0);
  }
  void add_unique_id(int32_t unique_id) {
    fbb_.AddElement<int32_t>(PlayingCard::VT_UNIQUE_ID, unique_id, 0);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(PlayingCard::VT_VALUE, value, 0);
  }
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(PlayingCard::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(PlayingCard::VT_Y, y, 0);
  }
  void add_flipped(bool flipped) {
    fbb_.AddElement<uint8_t>(PlayingCard::VT_FLIPPED, static_cast<uint8_t>(flipped), 0);
  }
  explicit PlayingCardBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PlayingCard> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayingCard>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayingCard> CreatePlayingCard(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t packet_type = 0,
    int32_t command = 0,
    int32_t unique_id = 0,
    int32_t value = 0,
    int32_t x = 0,
    int32_t y = 0,
    bool flipped = false) {
  PlayingCardBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_value(value);
  builder_.add_unique_id(unique_id);
  builder_.add_command(command);
  builder_.add_packet_type(packet_type);
  builder_.add_flipped(flipped);
  return builder_.Finish();
}

struct PacketTypeHolder FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PacketTypeHolderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4
  };
  int32_t packet_type() const {
    return GetField<int32_t>(VT_PACKET_TYPE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PACKET_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct PacketTypeHolderBuilder {
  typedef PacketTypeHolder Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(int32_t packet_type) {
    fbb_.AddElement<int32_t>(PacketTypeHolder::VT_PACKET_TYPE, packet_type, 0);
  }
  explicit PacketTypeHolderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PacketTypeHolder> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PacketTypeHolder>(end);
    return o;
  }
};

inline flatbuffers::Offset<PacketTypeHolder> CreatePacketTypeHolder(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t packet_type = 0) {
  PacketTypeHolderBuilder builder_(_fbb);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

inline const GS::GameState *GetGameState(const void *buf) {
  return flatbuffers::GetRoot<GS::GameState>(buf);
}

inline const GS::GameState *GetSizePrefixedGameState(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GS::GameState>(buf);
}

inline bool VerifyGameStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GS::GameState>(nullptr);
}

inline bool VerifySizePrefixedGameStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GS::GameState>(nullptr);
}

inline void FinishGameStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GS::GameState> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GS::GameState> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GS

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_GS_H_
